#!/usr/bin/env python

# usage
def usage():
        print '''
presparx -o < Output File >
         -e : error estimation
         -p : profile plot
         -v : generate vtk file
         -c : converter
         -z : ZeusTW interface
'''

# parser
import sys, getopt
argv = sys.argv[1:]

if not argv:
        usage()
        sys.exit(2)

try:
    opts, args = getopt.getopt( argv, "o:cvpez", [ "--out", "out=", "--converter", "--plot", "--vtk", "--error", "--zeus"] )
except getopt.GetoptError:
    print 'can not recognize option : ', args
    usage()
    sys.exit(2)

OutputFile = ''
convert_mode = plot = vtk = error = zeus = False
for opt, arg in opts:
    if   opt in ("-o", "--out"):
        OutputFile = arg
    elif opt in ("-c", "--converter "):
        convert_mode = True
    elif opt in ("-p", "--plot "):
        plot = True
    elif opt in ("-v", "--visual"):
        vtk = True
    elif opt in ("-e", "--error"):
        error = True
    elif opt in ("-z", "--zeus"):
        zeus = True
        convert_mode = True

# pre-check
from os.path import isfile, expanduser
Converter = 'converter.py'
ZeusPars =  'zeus_parameter.py'
GridFile=   'grid.py'
ModelFile=  'model.py'
if convert_mode:
    if zeus:
        if not isfile(ZeusPars):
            print '[PRESPARX] %s not found' % ZeusPars
            sys.exit(1)
        sys.path.append(expanduser('~/sparx-alpha/preprocessor/presparx/Zeus'))
    else:
        if not isfile(Converter):
            print '[PRESPARX] %s not found' % Converter
            sys.exit(1)
elif not isfile(GridFile):
    print '[PRESPARX] %s not found' % GridFile
    sys.exit(1)
elif not isfile(ModelFile):
    print '[PRESPARX] %s not found' % ModelFile
    sys.exit(1)

from sparx import pre_mesh
from sparx import pre_profile
phys = pre_profile.profile()
if convert_mode:
    import converter as cvt
    mesh = pre_mesh.from_dataset(cvt)
    phys.from_dataset(mesh,cvt)
else:
    import grid as gr
    import model as md
    # generate mesh
    mesh = pre_mesh.mesh(gr)
    # mapping physical model
    phys.from_model(mesh,md)


# double check the error of the model
if error:
        from sparx import pre_error
        pre_error.error(mesh,phys)

# visualization
if plot:
        from sparx import pre_visual
        pre_visual.plot(mesh,phys)

if vtk:
        from sparx import pre_visual
        pre_visual.vtk_output(mesh,phys)

# export HDF
if OutputFile:
        from sparx import pre_hdf
        pre_hdf.export(mesh,phys,OutputFile)
        print '[PRESPARX] wrote out "%s"' %OutputFile







