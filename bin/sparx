#!/usr/bin/env python


import argparse
from sys import argv

from sparx import MOLEC_LIST
from sparx.inputs import Type as SPARX_TYPE
from sparx.tasks import TASK_DICT


### helper function
def command_help(args):
    from sparx import utils, _sparx
    from sparx.inputs import PhysVal
    from sparx.physics import Molecule

    # initialize message handler
    Mesg = utils.MESG


    keyword = args.keyword

    if keyword in TASK_DICT:
        # documentation on SPARX tasks
        Mesg.Raw(TASK_DICT[keyword].__doc__)

    elif keyword in MOLEC_LIST:
        # documentation on molecule tables
        mol = Molecule(keyword)

        Mesg.Raw("Molecular data for \"{:s}\":".format(mol.name))
        Mesg.Raw("File path: \"{:s}\"".format(mol.path))
        Mesg.Raw("{:s}".format(mol))

    elif hasattr(SPARX_TYPE, keyword):
        # documentation on datatypes
        value = getattr(SPARX_TYPE, keyword)

        if isinstance(value, PhysVal):
            conv_list = sorted([(value.convs[unit], unit) for unit in value.convs])

            msg  = ["Keyword type '{:s}' accepts a string containing both a value and a unit, e.g. '1{:s}'.".format(value.name, value.unit),
                    "The following units are available:"]
            msg += ["  '{:s}' = {:g} [{:s}]".format(i[1], i[0], value.unit)
                    for i in conv_list]

            Mesg.Raw("\n".join(msg))

        elif value.name == "Molec":
            molec_list = [Molecule(i) for i in MOLEC_LIST]

            Mesg.Raw("Keyword type 'Molec' accepts the following molecules:")
            Mesg.Raw("{:>22s}{:>20s}{:>6s}{:>6s}{:>21s}{:>8s}  {:s}".format(
                     "Molecule", "Chemical Name", "Levs", "Lines", "LowFreq", "Trans", "Partners"))

            for mol in molec_list:
                molref = mol.chemname.split()

                Mesg.Raw("{:>22s}{:>20s}{:>6d}{:>6d}{:>17.5g} MHz{:>8d}  {:s}".format(
                          mol.name, molref[0], mol.nlev, mol.nline,
                          mol.line_freq[0] * 1e-6, mol.col[0].ntrans,
                          ", ".join([col.name for col in mol.col])))
            Mesg.Raw("For detailed data on individual molecules, try 'help MOLEC'")

        else:
            Mesg.Raw("Keyword type '{:s}':".format(value.name))
            Mesg.Raw(value.__doc__)


def command_run(args):
    from sparx import utils, _sparx

    # initialize message handler
    Mesg = utils.MESG

    if args.parallel:
        if not _sparx.HAVE_MPI:
            print("MPI is not supported")
        else:
            # update the MPI information
            utils.MPI_RANK, utils.MPI_SIZE = _sparx.init_mpi()

    # execute the task
    TASK_DICT[args.task].run(args.params)

    if args.parallel and _sparx.HAVE_MPI:
        _sparx.finalize_mpi()


### parser
parser = argparse.ArgumentParser(description = "Execute the radiative transfer code SPARX",
                                 formatter_class = argparse.RawDescriptionHelpFormatter,
                                 epilog = "SPARX tasks:\n" \
                                        + "\n".join(["    {}".format(i)  for i in TASK_DICT]))

# main parser
parser.add_argument("-v", "--version",  action = "store_true", help = "show the SPARX version")
parser.add_argument("-p", "--parallel", action = "store_true", help = "enable parallel execution")
parser.add_argument("-d", "--debug",    action = "store_true", help = "enable debug (obsolete)")

subparser_cmd = parser.add_subparsers(title = "Commands")

# sub-parser for the "help" command
parser_help = subparser_cmd.add_parser("help", help = "show help information for the specified SPARX task, datatype, and available molecule table")
parser_help.add_argument("keyword", help = "name of SPARX task, datatype, or available molecule table",
                         choices = list(TASK_DICT.keys()) \
                                 + MOLEC_LIST \
                                 + [i  for i in dir(SPARX_TYPE)  if i[0] != "_"])
parser_help.set_defaults(func = command_help)

# sub-parser for the "run" command
parser_run = subparser_cmd.add_parser("run", help = "execute the specified SPARX task")
parser_run.add_argument("task", choices = TASK_DICT.keys(), help = "SPARX task to be executed")
parser_run.add_argument("params", nargs = argparse.REMAINDER,
                        help = "additional parameters for the SPARX task in the format 'key=value'")
parser_run.set_defaults(func = command_run)


if len(argv) == 1:
    # print help if no arguments given
    parser.print_help()
    parser.exit()
else:
    args = parser.parse_args()


### execution
if args.version:
    from sys import version_info
    import sparx

    python_ver = "(python {}.{})".format(version_info.major, version_info.minor)
    sparx_ver  = "{} {} from {} {}".format(sparx.__name__, sparx.__version__, sparx.__path__[0], python_ver)

    print(sparx_ver)
    exit()


args.func(args)
